/*----------------------------------------------------------------------------*
 * Grammar for the phaze language.
 *----------------------------------------------------------------------------*/

grammar phaze;

import common;

@header {
	package Phaze;
}

init
	: typeDecl* EOF
	;

typeDecl
	: cellDecl
	| matDecl
	| compDecl
	| isoDecl
	| reaDecl
	;

/*----------------------------------------------------------------------------*
 * Cell definition
 *----------------------------------------------------------------------------*/

cellDecl
	: 'cell' cellBody
	;

cellBody
	: '{' varDecl* '}'
	;

/*----------------------------------------------------------------------------*
 * Material definition
 *----------------------------------------------------------------------------*/

matDecl
	: 'material' matBody
	;

matBody
	: '{' varDecl* '}'
	;

/*----------------------------------------------------------------------------*
 * Composition definition
 *----------------------------------------------------------------------------*/

compDecl
	: 'composition' compBody
	;

compBody
	: '{' varDecl* '}'
	;

/*----------------------------------------------------------------------------*
 * Isotope definition
 *----------------------------------------------------------------------------*/

isoDecl
	: 'isotope' isoBody
	;

isoBody
	: '{' varDecl* '}'
	;

/*----------------------------------------------------------------------------*
 * Reaction definition
 *----------------------------------------------------------------------------*/

reaDecl
	: 'reaction' reaBody
	;

reaBody
	: '{' varDecl* '}'
	;

/*----------------------------------------------------------------------------*
 * Variable declaration
 *----------------------------------------------------------------------------*/

varDecl
	: ';'
	| storage? type ID ('[' INT ']')?';'
	| storage? type ID (',' ID)* ';'
	;

/*----------------------------------------------------------------------------*
 * Storage qualifier
 *----------------------------------------------------------------------------*/

storage
	: 'static'
	;

/*----------------------------------------------------------------------------*
 * Types
 *----------------------------------------------------------------------------*/

type
	: primitive
	;

primitive
	: 'int'
	| 'int32_t'
	| 'int64_t'
	| 'float'
	| 'double'
	| 'position'
	| 'vector'
	;

/*----------------------------------------------------------------------------*
 * vim: set syntax=antlr : set ts=3
 *----------------------------------------------------------------------------*/
