<!-- ==========================================================================!
 ! Ant build specification for the phaze project
 !========================================================================== -->

<project name="MyProject" default="phaze" basedir=".">
	<description>Phaze DSL Project</description>

	<!-- read machine-specific properties for this build -->
	<property file="build.properties"/>

	<!-- set global properties for this build -->
	<property name="src" location="${basedir}/src"/>
	<property name="build" location="${basedir}/build"/>
	<property name="dist" location="${basedir}/dist"/>
	<property name="utils" location="${basedir}/utils"/>
	<property name="samples" location="${basedir}/samples"/>
	<property name="share" location="${basedir}/share"/>

	<property name="version" value="phaze-0.1-beta"/>

	<!-- ======================================================================!
	 ! Build phaze
	 !======================================================================= -->
	<target name="phaze" depends="grammar">

		<!-- ===================================================================!
		 ! Create java classes from ANTLR4 grammar
		 !=================================================================== -->
		<javac
			destdir="${build}/classes"
			deprecation="Yes"
			listfiles="Yes"
			includeantruntime="false">

			<src path="${src}/compiler"/>
			<src path="${build}/phaze"/>

			<classpath>
				<pathelement path="${java.class.path} ${build}/classes"/>
			</classpath>
		</javac>

		<!-- ===================================================================!
		 ! Archive compiled classes
		 !==================================================================== -->
		<mkdir dir="${build}/jar"/>
		<jar destfile="${build}/jar/phaze.jar"
			basedir="${build}/classes">

		<zipfileset includes="**/*.class" src="${antlr4.jar}"/>
		<zipfileset includes="**/*.class" src="${cli.jar}"/>
		<zipfileset includes="**/*.class" src="${io.jar}"/>

		<manifest>
			<attribute name="Main-Class" value="Phaze.Main"/>
		</manifest>
		</jar>
	</target>

	<!-- ======================================================================!
	 ! Create jar from ANTLR4 grammar
	 !======================================================================= -->
	<target name="grammar" depends="prog_antlr">

		<!-- ===================================================================!
		 ! Create java classes from ANTLR4 grammar
		 !=================================================================== -->
		<java classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="${build}/antlr"/>
			<arg path="${src}/grammar/phaze.g4"/>
		</java>

		<!-- ===================================================================!
		 ! Compile java classes
		 !=================================================================== -->
		<mkdir dir="${build}/classes"/>
		<javac srcdir="${build}/antlr"
			destdir="${build}/classes"
			deprecation="Yes"
			listfiles="Yes"
			includeantruntime="false">

			<classpath>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</javac>

		<!-- ===================================================================!
		 ! Create wrapper
		 !=================================================================== -->
		<mkdir dir="${build}/bin"/>
		<copy file="${src}/script/phaze.in" tofile="build/bin/phaze">
			<filterset>
				<filter token="PATH" value="${build}"/>
			</filterset>
		</copy>
		<chmod file="${build}/bin/phaze" perm="+x"/>
	</target>

	<!-- ======================================================================!
	 ! Install
	 !======================================================================= -->
	<target name="install">
		<mkdir dir="${install}/phaze"/>
		<mkdir dir="${install}/phaze/jar"/>
		<mkdir dir="${install}/phaze/bin"/>
		<mkdir dir="${install}/phaze/share"/>

		<copy file="${src}/script/phaze.in" tofile="${install}/phaze/bin/phaze">
			<filterset>
				<filter token="PATH" value="${install}/phaze"/>
			</filterset>
		</copy>
		<chmod file="${install}/phaze/bin/phaze" perm="+x"/>

		<copy file="${build}/jar/phaze.jar" todir="${install}/phaze/jar"/>

		<copy todir="${install}/phaze/share">
			<fileset dir="${share}"/>
		</copy>
	</target>

	<!-- ======================================================================!
	 ! Distribution
	 !======================================================================= -->
	<target name="dist" depends="phaze">

		<!-- Create temporary dist directories -->
		<mkdir dir="${dist}"/>
		<mkdir dir="${build}/dist/${version}"/>
		<mkdir dir="${build}/dist/${version}/bin"/>
		<mkdir dir="${build}/dist/${version}/jar"/>
		<mkdir dir="${build}/dist/${version}/samples"/>
		<mkdir dir="${build}/dist/${version}/share"/>

		<!-- Copy file into temporary dist directory -->
		<copy file="${src}/script/phaze.in"
			tofile="${build}/dist/${version}/bin/phaze.in"/>
		<copy file="${src}/script/install" todir="${build}/dist/${version}"/>
		<copy file="${build}/jar/phaze.jar"
			todir="${build}/dist/${version}/jar"/>
		<copy todir="${build}/dist/${version}/samples">
			<fileset dir="${samples}"/>
		</copy>
		<copy todir="${build}/dist/${version}/share">
			<fileset dir="${share}"/>
		</copy>

		<!-- Create archive-->
		<tar destfile="${build}/${version}.tar">
			<tarfileset dir="${build}/dist" filemode="755">
				<include name="${version}/install"/>
			</tarfileset>
			<tarfileset dir="${build}/dist">
				<include name="${version}/**"/>
				<exclude name="${version}/install"/>
			</tarfileset>
		</tar>
		<gzip src="${build}/${version}.tar" destfile="${dist}/${version}.tgz"/>

		<!-- Clean up -->
		<delete dir="${build}/dist"/>
		<delete file="${build}/${version}.tar"/>
	</target>

	<!-- ======================================================================!
	 ! Initialize the build structure
	 !======================================================================= -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the build directory -->
		<mkdir dir="${build}"/>
		<mkdir dir="${build}/phaze"/>
		<mkdir dir="${build}/share"/>

		<exec executable="${utils}/create_static_interface">
		<arg value="PhazeInterfaceC"/>
		<arg value="${src}/interface/static_interface_c.h"/>
		<arg value="${build}/phaze/PhazeInterfaceC.java"/>
		</exec>

		<copy todir="${build}/share">
			<fileset dir="${share}"/>
		</copy>
		<chmod file="${build}/share/config/bootstrap" perm="+x"/>
		<chmod file="${build}/share/config/clean_ac" perm="+x"/>
	</target>

	<!-- ======================================================================!
	 ! Clean the build
	 !======================================================================= -->
	<target name="clean"
		description="clean up">
		<delete dir="${build}"/>
	</target>

	<!-- ======================================================================!
	 ! Clean the build
	 !======================================================================= -->
	<target name="distclean"
		description="clean up">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

	<!-- ======================================================================!
	 ! Find ANTLR4 in CLASSPATH
	 !======================================================================= -->
	<target name="prog_antlr" depends="init">
		<whichresource property="antlr.in.classpath"
			class="org.antlr.v4.Tool"/>

		<fail message="ANTLR4 not found via CLASSPATH ${java.class.path}">
			<condition>
				<not>
					<isset property="antlr.in.classpath"/>
				</not>
			</condition>
		</fail>

		<echo message="ANTLR4 found via CLASSPATH"/>
	</target>

</project>
